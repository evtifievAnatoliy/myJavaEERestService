/*
 * Курс "DEV-j210. Java EE. Разработка веб-сервисов".
 * Класс MessageList предназначен для храниения общего списка сообщений 
 * пользователей и выполнения стандартных операций над этим списком. Доступ 
 * пользователей к списку осуществляется через REST-сервис.
 * (С) Ю.Д.Заковряшин, 2018-2020.
 */
package demo;

import java.util.ArrayList;

/**
 * Класс представляет собой хранилище сообщений пользователей. Все сообщения
 * хранятся в формате "имя_пользователя:сообщение". Доступ пользователей к
 * списку осуществляется через REST-сервис. Класс реализует классический шаблон
 * проектирования Singleton.
 *
 * @author (С) Ю.Д.Заковряшин, 2018-2020.
 */
public class MessageList {

    /**
     * Ссылка на единственный экземпляр (Singleton) этого объекта.
     */
    private static MessageList instance;
    /**
     * Список сообщений хранится в коллекции.
     */
    private ArrayList<String> list;
    /**
     * Ограничение длины общего списка. В случае, если длина списка достигла
     * данной величины, то при получении нового сообщения будет автоматически
     * удалятся первое сообщение из списка.
     */
    private static final int MAX_LENGTH = 25;

    /**
     * Метод позволяет пользователям получить ссылку на единственный экземпляр
     * этого типа.
     *
     * @return ссылка ссылку на единственный экземпляр этого типа.
     */
    public static MessageList getInstance() {
        if (instance == null) {
            instance = new MessageList();
        }
        return instance;
    }

    /**
     * Закрытый и единственный конструктор класса, который инициализирует список
     * сообщений пользователей.
     */
    private MessageList() {
        list = new ArrayList<>();
        list.add("defaultUser: test message");
    }

    /**
     * Метод позволяет добавить новое сообщение в общий список сообщений. Общая
     * длина списка ограничивается значением {@link #MAX_LENGTH}.
     *
     * @param item добавляемое сообщение.
     */
    public void add(String item) {
        if (list.size() == MAX_LENGTH) {
            // Удаление первого элемента списка, если длина списка достигла 
            // значения MAX_LENTH.
            list.remove(0);
        }
        list.add(item);
    }

    /**
     * Метод позволяет заменить/обновить сообщение в общем списке сообщений.
     *
     * @param id индекс сообщения в списке.
     * @param user регистрационное имя пользователя.
     * @param message добавляемое сообщение.
     * @return старое значение сообщения в случае его замены. Если сообщения с
     * индексом id в списке нет, то возвращается сообщение об ошибке.
     */
    public String change(int id, String user, String message) {
        if (id < 0 || id > list.size() - 1) {
            return "Invalid list index";
        }
        return list.set(id, user + ": " + message );
    }

    /**
     * Метод позволяет удалить сообщение с заданным индексом id из общего списка
     * сообщений.
     *
     * @param id индекс сообщения в списке.
     * @return старое значение сообщения в случае его удаления. Если сообщения с
     * индексом id в списке нет, то возвращается сообщение об ошибке.
     */
    public String delete(int id) {
        if (id > -1 && id < list.size()) {
            return list.remove(id);
        }
        return "Invalid index value";
    }

    /**
     * Метод позволяет получить общий список сообщений.
     *
     * @return оформленный в виде HTML-текста общий список сообщений.
     */
    public String getList() {
        StringBuilder sb = new StringBuilder();
        sb.append("<ol>\n");
        for (String s : list) {
            sb.append("<li>").append(s).append("</li>\n");
        }
        sb.append("</ol>");
        return sb.toString();
    }
}
